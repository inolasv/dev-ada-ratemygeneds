{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Encrypter = void 0;\n/* eslint-disable @typescript-eslint/no-var-requires */\n\nconst bson_1 = require(\"./bson\");\n\nconst constants_1 = require(\"./constants\");\n\nconst error_1 = require(\"./error\");\n\nconst mongo_client_1 = require(\"./mongo_client\");\n\nlet AutoEncrypterClass;\n/** @internal */\n\nconst kInternalClient = Symbol('internalClient');\n/** @internal */\n\nclass Encrypter {\n  constructor(client, uri, options) {\n    if (typeof options.autoEncryption !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Option \"autoEncryption\" must be specified');\n    }\n\n    this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n    this.needsConnecting = false;\n\n    if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = client;\n    } else if (options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);\n    }\n\n    if (this.bypassAutoEncryption) {\n      options.autoEncryption.metadataClient = undefined;\n    } else if (options.maxPoolSize === 0) {\n      options.autoEncryption.metadataClient = client;\n    } else {\n      options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);\n    }\n\n    if (options.proxyHost) {\n      options.autoEncryption.proxyOptions = {\n        proxyHost: options.proxyHost,\n        proxyPort: options.proxyPort,\n        proxyUsername: options.proxyUsername,\n        proxyPassword: options.proxyPassword\n      };\n    }\n\n    options.autoEncryption.bson = Object.create(null); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    options.autoEncryption.bson.serialize = bson_1.serialize; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    options.autoEncryption.bson.deserialize = bson_1.deserialize;\n    this.autoEncrypter = new AutoEncrypterClass(client, options.autoEncryption);\n  }\n\n  getInternalClient(client, uri, options) {\n    if (!this[kInternalClient]) {\n      const clonedOptions = {};\n\n      for (const key of Object.keys(options)) {\n        if (['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].includes(key)) continue;\n        Reflect.set(clonedOptions, key, Reflect.get(options, key));\n      }\n\n      clonedOptions.minPoolSize = 0;\n      this[kInternalClient] = new mongo_client_1.MongoClient(uri, clonedOptions);\n\n      for (const eventName of constants_1.MONGO_CLIENT_EVENTS) {\n        for (const listener of client.listeners(eventName)) {\n          this[kInternalClient].on(eventName, listener);\n        }\n      }\n\n      client.on('newListener', (eventName, listener) => {\n        this[kInternalClient].on(eventName, listener);\n      });\n      this.needsConnecting = true;\n    }\n\n    return this[kInternalClient];\n  }\n\n  connectInternalClient(callback) {\n    if (this.needsConnecting) {\n      this.needsConnecting = false;\n      return this[kInternalClient].connect(callback);\n    }\n\n    return callback();\n  }\n\n  close(client, force, callback) {\n    this.autoEncrypter.teardown(!!force, e => {\n      if (this[kInternalClient] && client !== this[kInternalClient]) {\n        return this[kInternalClient].close(force, callback);\n      }\n\n      callback(e);\n    });\n  }\n\n  static checkForMongoCrypt() {\n    let mongodbClientEncryption = undefined;\n\n    try {\n      // Ensure you always wrap an optional require in the try block NODE-3199\n      mongodbClientEncryption = require('mongodb-client-encryption');\n    } catch (err) {\n      throw new error_1.MongoMissingDependencyError('Auto-encryption requested, but the module is not installed. ' + 'Please add `mongodb-client-encryption` as a dependency of your project');\n    }\n\n    AutoEncrypterClass = mongodbClientEncryption.extension(require('../lib/index')).AutoEncrypter;\n  }\n\n}\n\nexports.Encrypter = Encrypter;","map":null,"metadata":{},"sourceType":"script"}