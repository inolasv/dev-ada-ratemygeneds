{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeDeleteStatement = exports.DeleteManyOperation = exports.DeleteOneOperation = exports.DeleteOperation = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst utils_1 = require(\"../utils\");\n\nconst command_1 = require(\"./command\");\n\nconst operation_1 = require(\"./operation\");\n/** @internal */\n\n\nclass DeleteOperation extends command_1.CommandOperation {\n  constructor(ns, statements, options) {\n    super(undefined, options);\n    this.options = options;\n    this.ns = ns;\n    this.statements = statements;\n  }\n\n  get canRetryWrite() {\n    if (super.canRetryWrite === false) {\n      return false;\n    }\n\n    return this.statements.every(op => op.limit != null ? op.limit > 0 : true);\n  }\n\n  execute(server, session, callback) {\n    var _a;\n\n    const options = (_a = this.options) !== null && _a !== void 0 ? _a : {};\n    const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n    const command = {\n      delete: this.ns.collection,\n      deletes: this.statements,\n      ordered\n    };\n\n    if (options.let) {\n      command.let = options.let;\n    }\n\n    if (options.explain != null && (0, utils_1.maxWireVersion)(server) < 3) {\n      return callback ? callback(new error_1.MongoCompatibilityError(`Server ${server.name} does not support explain on delete`)) : undefined;\n    }\n\n    const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n\n    if (unacknowledgedWrite || (0, utils_1.maxWireVersion)(server) < 5) {\n      if (this.statements.find(o => o.hint)) {\n        callback(new error_1.MongoCompatibilityError(`Servers < 3.4 do not support hint on delete`));\n        return;\n      }\n    }\n\n    const statementWithCollation = this.statements.find(statement => !!statement.collation);\n\n    if (statementWithCollation && (0, utils_1.collationNotSupported)(server, statementWithCollation)) {\n      callback(new error_1.MongoCompatibilityError(`Server ${server.name} does not support collation`));\n      return;\n    }\n\n    super.executeCommand(server, session, command, callback);\n  }\n\n}\n\nexports.DeleteOperation = DeleteOperation;\n\nclass DeleteOneOperation extends DeleteOperation {\n  constructor(collection, filter, options) {\n    super(collection.s.namespace, [makeDeleteStatement(filter, { ...options,\n      limit: 1\n    })], options);\n  }\n\n  execute(server, session, callback) {\n    super.execute(server, session, (err, res) => {\n      var _a, _b;\n\n      if (err || res == null) return callback(err);\n      if (res.code) return callback(new error_1.MongoServerError(res));\n      if (res.writeErrors) return callback(new error_1.MongoServerError(res.writeErrors[0]));\n      if (this.explain) return callback(undefined, res);\n      callback(undefined, {\n        acknowledged: (_b = ((_a = this.writeConcern) === null || _a === void 0 ? void 0 : _a.w) !== 0) !== null && _b !== void 0 ? _b : true,\n        deletedCount: res.n\n      });\n    });\n  }\n\n}\n\nexports.DeleteOneOperation = DeleteOneOperation;\n\nclass DeleteManyOperation extends DeleteOperation {\n  constructor(collection, filter, options) {\n    super(collection.s.namespace, [makeDeleteStatement(filter, options)], options);\n  }\n\n  execute(server, session, callback) {\n    super.execute(server, session, (err, res) => {\n      var _a, _b;\n\n      if (err || res == null) return callback(err);\n      if (res.code) return callback(new error_1.MongoServerError(res));\n      if (res.writeErrors) return callback(new error_1.MongoServerError(res.writeErrors[0]));\n      if (this.explain) return callback(undefined, res);\n      callback(undefined, {\n        acknowledged: (_b = ((_a = this.writeConcern) === null || _a === void 0 ? void 0 : _a.w) !== 0) !== null && _b !== void 0 ? _b : true,\n        deletedCount: res.n\n      });\n    });\n  }\n\n}\n\nexports.DeleteManyOperation = DeleteManyOperation;\n\nfunction makeDeleteStatement(filter, options) {\n  const op = {\n    q: filter,\n    limit: typeof options.limit === 'number' ? options.limit : 0\n  };\n\n  if (options.single === true) {\n    op.limit = 1;\n  }\n\n  if (options.collation) {\n    op.collation = options.collation;\n  }\n\n  if (options.hint) {\n    op.hint = options.hint;\n  }\n\n  if (options.comment) {\n    op.comment = options.comment;\n  }\n\n  return op;\n}\n\nexports.makeDeleteStatement = makeDeleteStatement;\n(0, operation_1.defineAspects)(DeleteOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DeleteOneOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.EXPLAINABLE, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(DeleteManyOperation, [operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.EXPLAINABLE, operation_1.Aspect.SKIP_COLLATION]);","map":null,"metadata":{},"sourceType":"script"}