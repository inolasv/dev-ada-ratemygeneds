{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BulkWriteOperation = void 0;\n\nconst operation_1 = require(\"./operation\");\n/** @internal */\n\n\nclass BulkWriteOperation extends operation_1.AbstractOperation {\n  constructor(collection, operations, options) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n    this.operations = operations;\n  }\n\n  execute(server, session, callback) {\n    const coll = this.collection;\n    const operations = this.operations;\n    const options = { ...this.options,\n      ...this.bsonOptions,\n      readPreference: this.readPreference\n    }; // Create the bulk operation\n\n    const bulk = options.ordered === false ? coll.initializeUnorderedBulkOp(options) : coll.initializeOrderedBulkOp(options); // for each op go through and add to the bulk\n\n    try {\n      for (let i = 0; i < operations.length; i++) {\n        bulk.raw(operations[i]);\n      }\n    } catch (err) {\n      return callback(err);\n    } // Execute the bulk\n\n\n    bulk.execute({ ...options,\n      session\n    }, (err, r) => {\n      // We have connection level error\n      if (!r && err) {\n        return callback(err);\n      } // Return the results\n\n\n      callback(undefined, r);\n    });\n  }\n\n}\n\nexports.BulkWriteOperation = BulkWriteOperation;\n(0, operation_1.defineAspects)(BulkWriteOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":null,"metadata":{},"sourceType":"script"}