{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isResumableError = exports.isNetworkTimeoutError = exports.isSDAMUnrecoverableError = exports.isNodeShuttingDownError = exports.isRetryableError = exports.isRetryableWriteError = exports.isRetryableEndTransactionError = exports.MongoWriteConcernError = exports.MongoServerSelectionError = exports.MongoSystemError = exports.MongoMissingDependencyError = exports.MongoMissingCredentialsError = exports.MongoCompatibilityError = exports.MongoInvalidArgumentError = exports.MongoParseError = exports.MongoNetworkTimeoutError = exports.MongoNetworkError = exports.isNetworkErrorBeforeHandshake = exports.MongoTopologyClosedError = exports.MongoCursorExhaustedError = exports.MongoServerClosedError = exports.MongoCursorInUseError = exports.MongoGridFSChunkError = exports.MongoGridFSStreamError = exports.MongoTailableCursorError = exports.MongoChangeStreamError = exports.MongoKerberosError = exports.MongoExpiredSessionError = exports.MongoTransactionError = exports.MongoNotConnectedError = exports.MongoDecompressionError = exports.MongoBatchReExecutionError = exports.MongoRuntimeError = exports.MongoAPIError = exports.MongoDriverError = exports.MongoServerError = exports.MongoError = exports.GET_MORE_RESUMABLE_CODES = exports.MONGODB_ERROR_CODES = exports.NODE_IS_RECOVERING_ERROR_MESSAGE = exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = void 0;\n/** @internal */\n\nconst kErrorLabels = Symbol('errorLabels');\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a writable primary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\n\nexports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = 'not master';\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a primary or secondary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\n\nexports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = 'not master or secondary';\n/**\n * @internal\n * The error message from the server that indicates the node is recovering\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\n\nexports.NODE_IS_RECOVERING_ERROR_MESSAGE = 'node is recovering';\n/** @internal MongoDB Error Codes */\n\nexports.MONGODB_ERROR_CODES = Object.freeze({\n  HostUnreachable: 6,\n  HostNotFound: 7,\n  NetworkTimeout: 89,\n  ShutdownInProgress: 91,\n  PrimarySteppedDown: 189,\n  ExceededTimeLimit: 262,\n  SocketException: 9001,\n  NotWritablePrimary: 10107,\n  InterruptedAtShutdown: 11600,\n  InterruptedDueToReplStateChange: 11602,\n  NotPrimaryNoSecondaryOk: 13435,\n  NotPrimaryOrSecondary: 13436,\n  StaleShardVersion: 63,\n  StaleEpoch: 150,\n  StaleConfig: 13388,\n  RetryChangeStream: 234,\n  FailedToSatisfyReadPreference: 133,\n  CursorNotFound: 43,\n  LegacyNotPrimary: 10058,\n  WriteConcernFailed: 64,\n  NamespaceNotFound: 26,\n  IllegalOperation: 20,\n  MaxTimeMSExpired: 50,\n  UnknownReplWriteConcern: 79,\n  UnsatisfiableWriteConcern: 100\n}); // From spec@https://github.com/mongodb/specifications/blob/f93d78191f3db2898a59013a7ed5650352ef6da8/source/change-streams/change-streams.rst#resumable-error\n\nexports.GET_MORE_RESUMABLE_CODES = new Set([exports.MONGODB_ERROR_CODES.HostUnreachable, exports.MONGODB_ERROR_CODES.HostNotFound, exports.MONGODB_ERROR_CODES.NetworkTimeout, exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.ExceededTimeLimit, exports.MONGODB_ERROR_CODES.SocketException, exports.MONGODB_ERROR_CODES.NotWritablePrimary, exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk, exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary, exports.MONGODB_ERROR_CODES.StaleShardVersion, exports.MONGODB_ERROR_CODES.StaleEpoch, exports.MONGODB_ERROR_CODES.StaleConfig, exports.MONGODB_ERROR_CODES.RetryChangeStream, exports.MONGODB_ERROR_CODES.FailedToSatisfyReadPreference, exports.MONGODB_ERROR_CODES.CursorNotFound]);\n/**\n * @public\n * @category Error\n *\n * @privateRemarks\n * CSFLE has a dependency on this error, it uses the constructor with a string argument\n */\n\nclass MongoError extends Error {\n  constructor(message) {\n    if (message instanceof Error) {\n      super(message.message);\n    } else {\n      super(message);\n    }\n  }\n\n  get name() {\n    return 'MongoError';\n  }\n  /** Legacy name for server error responses */\n\n\n  get errmsg() {\n    return this.message;\n  }\n  /**\n   * Checks the error to see if it has an error label\n   *\n   * @param label - The error label to check for\n   * @returns returns true if the error has the provided error label\n   */\n\n\n  hasErrorLabel(label) {\n    if (this[kErrorLabels] == null) {\n      return false;\n    }\n\n    return this[kErrorLabels].has(label);\n  }\n\n  addErrorLabel(label) {\n    if (this[kErrorLabels] == null) {\n      this[kErrorLabels] = new Set();\n    }\n\n    this[kErrorLabels].add(label);\n  }\n\n  get errorLabels() {\n    return this[kErrorLabels] ? Array.from(this[kErrorLabels]) : [];\n  }\n\n}\n\nexports.MongoError = MongoError;\n/**\n * An error coming from the mongo server\n *\n * @public\n * @category Error\n */\n\nclass MongoServerError extends MongoError {\n  constructor(message) {\n    super(message.message || message.errmsg || message.$err || 'n/a');\n\n    if (message.errorLabels) {\n      this[kErrorLabels] = new Set(message.errorLabels);\n    }\n\n    for (const name in message) {\n      if (name !== 'errorLabels' && name !== 'errmsg' && name !== 'message') this[name] = message[name];\n    }\n  }\n\n  get name() {\n    return 'MongoServerError';\n  }\n\n}\n\nexports.MongoServerError = MongoServerError;\n/**\n * An error generated by the driver\n *\n * @public\n * @category Error\n */\n\nclass MongoDriverError extends MongoError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoDriverError';\n  }\n\n}\n\nexports.MongoDriverError = MongoDriverError;\n/**\n * An error generated when the driver API is used incorrectly\n *\n * @privateRemarks\n * Should **never** be directly instantiated\n *\n * @public\n * @category Error\n */\n\nclass MongoAPIError extends MongoDriverError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoAPIError';\n  }\n\n}\n\nexports.MongoAPIError = MongoAPIError;\n/**\n * An error generated when the driver encounters unexpected input\n * or reaches an unexpected/invalid internal state\n *\n * @privateRemarks\n * Should **never** be directly instantiated.\n *\n * @public\n * @category Error\n */\n\nclass MongoRuntimeError extends MongoDriverError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoRuntimeError';\n  }\n\n}\n\nexports.MongoRuntimeError = MongoRuntimeError;\n/**\n * An error generated when a batch command is reexecuted after one of the commands in the batch\n * has failed\n *\n * @public\n * @category Error\n */\n\nclass MongoBatchReExecutionError extends MongoAPIError {\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'This batch has already been executed, create new batch to execute';\n    super(message);\n  }\n\n  get name() {\n    return 'MongoBatchReExecutionError';\n  }\n\n}\n\nexports.MongoBatchReExecutionError = MongoBatchReExecutionError;\n/**\n * An error generated when the driver fails to decompress\n * data received from the server.\n *\n * @public\n * @category Error\n */\n\nclass MongoDecompressionError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoDecompressionError';\n  }\n\n}\n\nexports.MongoDecompressionError = MongoDecompressionError;\n/**\n * An error thrown when the user attempts to operate on a database or collection through a MongoClient\n * that has not yet successfully called the \"connect\" method\n *\n * @public\n * @category Error\n */\n\nclass MongoNotConnectedError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoNotConnectedError';\n  }\n\n}\n\nexports.MongoNotConnectedError = MongoNotConnectedError;\n/**\n * An error generated when the user makes a mistake in the usage of transactions.\n * (e.g. attempting to commit a transaction with a readPreference other than primary)\n *\n * @public\n * @category Error\n */\n\nclass MongoTransactionError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoTransactionError';\n  }\n\n}\n\nexports.MongoTransactionError = MongoTransactionError;\n/**\n * An error generated when the user attempts to operate\n * on a session that has expired or has been closed.\n *\n * @public\n * @category Error\n */\n\nclass MongoExpiredSessionError extends MongoAPIError {\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Cannot use a session that has ended';\n    super(message);\n  }\n\n  get name() {\n    return 'MongoExpiredSessionError';\n  }\n\n}\n\nexports.MongoExpiredSessionError = MongoExpiredSessionError;\n/**\n * A error generated when the user attempts to authenticate\n * via Kerberos, but fails to connect to the Kerberos client.\n *\n * @public\n * @category Error\n */\n\nclass MongoKerberosError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoKerberosError';\n  }\n\n}\n\nexports.MongoKerberosError = MongoKerberosError;\n/**\n * An error generated when a ChangeStream operation fails to execute.\n *\n * @public\n * @category Error\n */\n\nclass MongoChangeStreamError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoChangeStreamError';\n  }\n\n}\n\nexports.MongoChangeStreamError = MongoChangeStreamError;\n/**\n * An error thrown when the user calls a function or method not supported on a tailable cursor\n *\n * @public\n * @category Error\n */\n\nclass MongoTailableCursorError extends MongoAPIError {\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Tailable cursor does not support this operation';\n    super(message);\n  }\n\n  get name() {\n    return 'MongoTailableCursorError';\n  }\n\n}\n\nexports.MongoTailableCursorError = MongoTailableCursorError;\n/** An error generated when a GridFSStream operation fails to execute.\n *\n * @public\n * @category Error\n */\n\nclass MongoGridFSStreamError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoGridFSStreamError';\n  }\n\n}\n\nexports.MongoGridFSStreamError = MongoGridFSStreamError;\n/**\n * An error generated when a malformed or invalid chunk is\n * encountered when reading from a GridFSStream.\n *\n * @public\n * @category Error\n */\n\nclass MongoGridFSChunkError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoGridFSChunkError';\n  }\n\n}\n\nexports.MongoGridFSChunkError = MongoGridFSChunkError;\n/**\n * An error thrown when the user attempts to add options to a cursor that has already been\n * initialized\n *\n * @public\n * @category Error\n */\n\nclass MongoCursorInUseError extends MongoAPIError {\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Cursor is already initialized';\n    super(message);\n  }\n\n  get name() {\n    return 'MongoCursorInUseError';\n  }\n\n}\n\nexports.MongoCursorInUseError = MongoCursorInUseError;\n/**\n * An error generated when an attempt is made to operate\n * on a closed/closing server.\n *\n * @public\n * @category Error\n */\n\nclass MongoServerClosedError extends MongoAPIError {\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Server is closed';\n    super(message);\n  }\n\n  get name() {\n    return 'MongoServerClosedError';\n  }\n\n}\n\nexports.MongoServerClosedError = MongoServerClosedError;\n/**\n * An error thrown when an attempt is made to read from a cursor that has been exhausted\n *\n * @public\n * @category Error\n */\n\nclass MongoCursorExhaustedError extends MongoAPIError {\n  constructor(message) {\n    super(message || 'Cursor is exhausted');\n  }\n\n  get name() {\n    return 'MongoCursorExhaustedError';\n  }\n\n}\n\nexports.MongoCursorExhaustedError = MongoCursorExhaustedError;\n/**\n * An error generated when an attempt is made to operate on a\n * dropped, or otherwise unavailable, database.\n *\n * @public\n * @category Error\n */\n\nclass MongoTopologyClosedError extends MongoAPIError {\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Topology is closed';\n    super(message);\n  }\n\n  get name() {\n    return 'MongoTopologyClosedError';\n  }\n\n}\n\nexports.MongoTopologyClosedError = MongoTopologyClosedError;\n/** @internal */\n\nconst kBeforeHandshake = Symbol('beforeHandshake');\n\nfunction isNetworkErrorBeforeHandshake(err) {\n  return err[kBeforeHandshake] === true;\n}\n\nexports.isNetworkErrorBeforeHandshake = isNetworkErrorBeforeHandshake;\n/**\n * An error indicating an issue with the network, including TCP errors and timeouts.\n * @public\n * @category Error\n */\n\nclass MongoNetworkError extends MongoError {\n  constructor(message, options) {\n    super(message);\n\n    if (options && typeof options.beforeHandshake === 'boolean') {\n      this[kBeforeHandshake] = options.beforeHandshake;\n    }\n  }\n\n  get name() {\n    return 'MongoNetworkError';\n  }\n\n}\n\nexports.MongoNetworkError = MongoNetworkError;\n/**\n * An error indicating a network timeout occurred\n * @public\n * @category Error\n *\n * @privateRemarks\n * CSFLE has a dependency on this error with an instanceof check\n */\n\nclass MongoNetworkTimeoutError extends MongoNetworkError {\n  constructor(message, options) {\n    super(message, options);\n  }\n\n  get name() {\n    return 'MongoNetworkTimeoutError';\n  }\n\n}\n\nexports.MongoNetworkTimeoutError = MongoNetworkTimeoutError;\n/**\n * An error used when attempting to parse a value (like a connection string)\n * @public\n * @category Error\n */\n\nclass MongoParseError extends MongoDriverError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoParseError';\n  }\n\n}\n\nexports.MongoParseError = MongoParseError;\n/**\n * An error generated when the user supplies malformed or unexpected arguments\n * or when a required argument or field is not provided.\n *\n *\n * @public\n * @category Error\n */\n\nclass MongoInvalidArgumentError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoInvalidArgumentError';\n  }\n\n}\n\nexports.MongoInvalidArgumentError = MongoInvalidArgumentError;\n/**\n * An error generated when a feature that is not enabled or allowed for the current server\n * configuration is used\n *\n *\n * @public\n * @category Error\n */\n\nclass MongoCompatibilityError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoCompatibilityError';\n  }\n\n}\n\nexports.MongoCompatibilityError = MongoCompatibilityError;\n/**\n * An error generated when the user fails to provide authentication credentials before attempting\n * to connect to a mongo server instance.\n *\n *\n * @public\n * @category Error\n */\n\nclass MongoMissingCredentialsError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoMissingCredentialsError';\n  }\n\n}\n\nexports.MongoMissingCredentialsError = MongoMissingCredentialsError;\n/**\n * An error generated when a required module or dependency is not present in the local environment\n *\n * @public\n * @category Error\n */\n\nclass MongoMissingDependencyError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoMissingDependencyError';\n  }\n\n}\n\nexports.MongoMissingDependencyError = MongoMissingDependencyError;\n/**\n * An error signifying a general system issue\n * @public\n * @category Error\n */\n\nclass MongoSystemError extends MongoError {\n  constructor(message, reason) {\n    if (reason && reason.error) {\n      super(reason.error.message || reason.error);\n    } else {\n      super(message);\n    }\n\n    if (reason) {\n      this.reason = reason;\n    }\n  }\n\n  get name() {\n    return 'MongoSystemError';\n  }\n\n}\n\nexports.MongoSystemError = MongoSystemError;\n/**\n * An error signifying a client-side server selection error\n * @public\n * @category Error\n */\n\nclass MongoServerSelectionError extends MongoSystemError {\n  constructor(message, reason) {\n    super(message, reason);\n  }\n\n  get name() {\n    return 'MongoServerSelectionError';\n  }\n\n}\n\nexports.MongoServerSelectionError = MongoServerSelectionError;\n\nfunction makeWriteConcernResultObject(input) {\n  const output = Object.assign({}, input);\n\n  if (output.ok === 0) {\n    output.ok = 1;\n    delete output.errmsg;\n    delete output.code;\n    delete output.codeName;\n  }\n\n  return output;\n}\n/**\n * An error thrown when the server reports a writeConcernError\n * @public\n * @category Error\n */\n\n\nclass MongoWriteConcernError extends MongoServerError {\n  constructor(message, result) {\n    if (result && Array.isArray(result.errorLabels)) {\n      message.errorLabels = result.errorLabels;\n    }\n\n    super(message);\n    this.errInfo = message.errInfo;\n\n    if (result != null) {\n      this.result = makeWriteConcernResultObject(result);\n    }\n  }\n\n  get name() {\n    return 'MongoWriteConcernError';\n  }\n\n}\n\nexports.MongoWriteConcernError = MongoWriteConcernError; // see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\n\nconst RETRYABLE_ERROR_CODES = new Set([exports.MONGODB_ERROR_CODES.HostUnreachable, exports.MONGODB_ERROR_CODES.HostNotFound, exports.MONGODB_ERROR_CODES.NetworkTimeout, exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.SocketException, exports.MONGODB_ERROR_CODES.NotWritablePrimary, exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk, exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary]);\nconst RETRYABLE_WRITE_ERROR_CODES = new Set([exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotWritablePrimary, exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk, exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.HostNotFound, exports.MONGODB_ERROR_CODES.HostUnreachable, exports.MONGODB_ERROR_CODES.NetworkTimeout, exports.MONGODB_ERROR_CODES.SocketException, exports.MONGODB_ERROR_CODES.ExceededTimeLimit]);\n\nfunction isRetryableEndTransactionError(error) {\n  return error.hasErrorLabel('RetryableWriteError');\n}\n\nexports.isRetryableEndTransactionError = isRetryableEndTransactionError;\n\nfunction isRetryableWriteError(error) {\n  var _a, _b, _c;\n\n  if (error instanceof MongoWriteConcernError) {\n    return RETRYABLE_WRITE_ERROR_CODES.has((_c = (_b = (_a = error.result) === null || _a === void 0 ? void 0 : _a.code) !== null && _b !== void 0 ? _b : error.code) !== null && _c !== void 0 ? _c : 0);\n  }\n\n  return typeof error.code === 'number' && RETRYABLE_WRITE_ERROR_CODES.has(error.code);\n}\n\nexports.isRetryableWriteError = isRetryableWriteError;\n/** Determines whether an error is something the driver should attempt to retry */\n\nfunction isRetryableError(error) {\n  return (// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    typeof error.code === 'number' && RETRYABLE_ERROR_CODES.has(error.code) || error instanceof MongoNetworkError || !!error.message.match(new RegExp(exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE)) || !!error.message.match(new RegExp(exports.NODE_IS_RECOVERING_ERROR_MESSAGE))\n  );\n}\n\nexports.isRetryableError = isRetryableError;\nconst SDAM_RECOVERING_CODES = new Set([exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary]);\nconst SDAM_NOTPRIMARY_CODES = new Set([exports.MONGODB_ERROR_CODES.NotWritablePrimary, exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk, exports.MONGODB_ERROR_CODES.LegacyNotPrimary]);\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.ShutdownInProgress]);\n\nfunction isRecoveringError(err) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_RECOVERING_CODES.has(err.code);\n  }\n\n  return new RegExp(exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE).test(err.message) || new RegExp(exports.NODE_IS_RECOVERING_ERROR_MESSAGE).test(err.message);\n}\n\nfunction isNotWritablePrimaryError(err) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_NOTPRIMARY_CODES.has(err.code);\n  }\n\n  if (isRecoveringError(err)) {\n    return false;\n  }\n\n  return new RegExp(exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE).test(err.message);\n}\n\nfunction isNodeShuttingDownError(err) {\n  return !!(typeof err.code === 'number' && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code));\n}\n\nexports.isNodeShuttingDownError = isNodeShuttingDownError;\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n */\n\nfunction isSDAMUnrecoverableError(error) {\n  // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n  //       close event are considered unrecoverable\n  if (error instanceof MongoParseError || error == null) {\n    return true;\n  }\n\n  return isRecoveringError(error) || isNotWritablePrimaryError(error);\n}\n\nexports.isSDAMUnrecoverableError = isSDAMUnrecoverableError;\n\nfunction isNetworkTimeoutError(err) {\n  return !!(err instanceof MongoNetworkError && err.message.match(/timed out/));\n}\n\nexports.isNetworkTimeoutError = isNetworkTimeoutError; // From spec@https://github.com/mongodb/specifications/blob/7a2e93d85935ee4b1046a8d2ad3514c657dc74fa/source/change-streams/change-streams.rst#resumable-error:\n//\n// An error is considered resumable if it meets any of the following criteria:\n// - any error encountered which is not a server error (e.g. a timeout error or network error)\n// - any server error response from a getMore command excluding those containing the error label\n//   NonRetryableChangeStreamError and those containing the following error codes:\n//   - Interrupted: 11601\n//   - CappedPositionLost: 136\n//   - CursorKilled: 237\n//\n// An error on an aggregate command is not a resumable error. Only errors on a getMore command may be considered resumable errors.\n\nfunction isResumableError(error, wireVersion) {\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n\n  if (wireVersion != null && wireVersion >= 9) {\n    // DRIVERS-1308: For 4.4 drivers running against 4.4 servers, drivers will add a special case to treat the CursorNotFound error code as resumable\n    if (error && error instanceof MongoError && error.code === 43) {\n      return true;\n    }\n\n    return error instanceof MongoError && error.hasErrorLabel('ResumableChangeStreamError');\n  }\n\n  if (error && typeof error.code === 'number') {\n    return exports.GET_MORE_RESUMABLE_CODES.has(error.code);\n  }\n\n  return false;\n}\n\nexports.isResumableError = isResumableError;","map":null,"metadata":{},"sourceType":"script"}