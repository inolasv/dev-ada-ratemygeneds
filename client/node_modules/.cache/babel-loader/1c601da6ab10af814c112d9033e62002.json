{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RenameOperation = void 0;\n\nconst collection_1 = require(\"../collection\");\n\nconst error_1 = require(\"../error\");\n\nconst utils_1 = require(\"../utils\");\n\nconst operation_1 = require(\"./operation\");\n\nconst run_command_1 = require(\"./run_command\");\n/** @internal */\n\n\nclass RenameOperation extends run_command_1.RunAdminCommandOperation {\n  constructor(collection, newName, options) {\n    // Check the collection name\n    (0, utils_1.checkCollectionName)(newName); // Build the command\n\n    const renameCollection = collection.namespace;\n    const toCollection = collection.s.namespace.withCollection(newName).toString();\n    const dropTarget = typeof options.dropTarget === 'boolean' ? options.dropTarget : false;\n    const cmd = {\n      renameCollection: renameCollection,\n      to: toCollection,\n      dropTarget: dropTarget\n    };\n    super(collection, cmd, options);\n    this.options = options;\n    this.collection = collection;\n    this.newName = newName;\n  }\n\n  execute(server, session, callback) {\n    const coll = this.collection;\n    super.execute(server, session, (err, doc) => {\n      if (err) return callback(err); // We have an error\n\n      if (doc.errmsg) {\n        return callback(new error_1.MongoServerError(doc));\n      }\n\n      let newColl;\n\n      try {\n        newColl = new collection_1.Collection(coll.s.db, this.newName, coll.s.options);\n      } catch (err) {\n        return callback(err);\n      }\n\n      return callback(undefined, newColl);\n    });\n  }\n\n}\n\nexports.RenameOperation = RenameOperation;\n(0, operation_1.defineAspects)(RenameOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":null,"metadata":{},"sourceType":"script"}