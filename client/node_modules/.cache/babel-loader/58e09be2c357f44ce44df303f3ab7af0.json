{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListCollectionsCursor = exports.ListCollectionsOperation = void 0;\n\nconst CONSTANTS = require(\"../constants\");\n\nconst abstract_cursor_1 = require(\"../cursor/abstract_cursor\");\n\nconst utils_1 = require(\"../utils\");\n\nconst command_1 = require(\"./command\");\n\nconst execute_operation_1 = require(\"./execute_operation\");\n\nconst operation_1 = require(\"./operation\");\n\nconst LIST_COLLECTIONS_WIRE_VERSION = 3;\n/** @internal */\n\nclass ListCollectionsOperation extends command_1.CommandOperation {\n  constructor(db, filter, options) {\n    super(db, options);\n    this.options = options !== null && options !== void 0 ? options : {};\n    this.db = db;\n    this.filter = filter;\n    this.nameOnly = !!this.options.nameOnly;\n    this.authorizedCollections = !!this.options.authorizedCollections;\n\n    if (typeof this.options.batchSize === 'number') {\n      this.batchSize = this.options.batchSize;\n    }\n  }\n\n  execute(server, session, callback) {\n    if ((0, utils_1.maxWireVersion)(server) < LIST_COLLECTIONS_WIRE_VERSION) {\n      let filter = this.filter;\n      const databaseName = this.db.s.namespace.db; // If we have legacy mode and have not provided a full db name filter it\n\n      if (typeof filter.name === 'string' && !new RegExp(`^${databaseName}\\\\.`).test(filter.name)) {\n        filter = Object.assign({}, filter);\n        filter.name = this.db.s.namespace.withCollection(filter.name).toString();\n      } // No filter, filter by current database\n\n\n      if (filter == null) {\n        filter = {\n          name: `/${databaseName}/`\n        };\n      } // Rewrite the filter to use $and to filter out indexes\n\n\n      if (filter.name) {\n        filter = {\n          $and: [{\n            name: filter.name\n          }, {\n            name: /^((?!\\$).)*$/\n          }]\n        };\n      } else {\n        filter = {\n          name: /^((?!\\$).)*$/\n        };\n      }\n\n      const documentTransform = doc => {\n        const matching = `${databaseName}.`;\n        const index = doc.name.indexOf(matching); // Remove database name if available\n\n        if (doc.name && index === 0) {\n          doc.name = doc.name.substr(index + matching.length);\n        }\n\n        return doc;\n      };\n\n      server.query(new utils_1.MongoDBNamespace(databaseName, CONSTANTS.SYSTEM_NAMESPACE_COLLECTION), {\n        query: filter\n      }, {\n        batchSize: this.batchSize || 1000,\n        readPreference: this.readPreference\n      }, (err, result) => {\n        if (result && result.documents && Array.isArray(result.documents)) {\n          result.documents = result.documents.map(documentTransform);\n        }\n\n        callback(err, result);\n      });\n      return;\n    }\n\n    return super.executeCommand(server, session, this.generateCommand(), callback);\n  }\n  /* This is here for the purpose of unit testing the final command that gets sent. */\n\n\n  generateCommand() {\n    return {\n      listCollections: 1,\n      filter: this.filter,\n      cursor: this.batchSize ? {\n        batchSize: this.batchSize\n      } : {},\n      nameOnly: this.nameOnly,\n      authorizedCollections: this.authorizedCollections\n    };\n  }\n\n}\n\nexports.ListCollectionsOperation = ListCollectionsOperation;\n/** @public */\n\nclass ListCollectionsCursor extends abstract_cursor_1.AbstractCursor {\n  constructor(db, filter, options) {\n    super((0, utils_1.getTopology)(db), db.s.namespace, options);\n    this.parent = db;\n    this.filter = filter;\n    this.options = options;\n  }\n\n  clone() {\n    return new ListCollectionsCursor(this.parent, this.filter, { ...this.options,\n      ...this.cursorOptions\n    });\n  }\n  /** @internal */\n\n\n  _initialize(session, callback) {\n    const operation = new ListCollectionsOperation(this.parent, this.filter, { ...this.cursorOptions,\n      ...this.options,\n      session\n    });\n    (0, execute_operation_1.executeOperation)((0, utils_1.getTopology)(this.parent), operation, (err, response) => {\n      if (err || response == null) return callback(err); // TODO: NODE-2882\n\n      callback(undefined, {\n        server: operation.server,\n        session,\n        response\n      });\n    });\n  }\n\n}\n\nexports.ListCollectionsCursor = ListCollectionsCursor;\n(0, operation_1.defineAspects)(ListCollectionsOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.CURSOR_CREATING]);","map":null,"metadata":{},"sourceType":"script"}